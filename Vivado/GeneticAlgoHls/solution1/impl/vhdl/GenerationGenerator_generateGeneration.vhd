-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity GenerationGenerator_generateGeneration is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    startGenerating : IN STD_LOGIC;
    generatingDone : OUT STD_LOGIC;
    generatingDone_ap_vld : OUT STD_LOGIC;
    generation_parent1 : IN STD_LOGIC_VECTOR (15 downto 0);
    generation_parent2 : IN STD_LOGIC_VECTOR (15 downto 0);
    generation_child1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    generation_child1_ap_vld : OUT STD_LOGIC;
    generation_child2 : OUT STD_LOGIC_VECTOR (15 downto 0);
    generation_child2_ap_vld : OUT STD_LOGIC;
    mutation_probability : IN STD_LOGIC_VECTOR (23 downto 0);
    GenerationGenerator_trueRandomIndex_V_i : IN STD_LOGIC_VECTOR (23 downto 0);
    GenerationGenerator_trueRandomIndex_V_o : OUT STD_LOGIC_VECTOR (23 downto 0);
    GenerationGenerator_trueRandomIndex_V_o_ap_vld : OUT STD_LOGIC;
    GenerationGenerator_randomNumbers_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    GenerationGenerator_randomNumbers_V_ce0 : OUT STD_LOGIC;
    GenerationGenerator_randomNumbers_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    GenerationGenerator_randomNumbers_V_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    GenerationGenerator_randomNumbers_V_ce1 : OUT STD_LOGIC;
    GenerationGenerator_randomNumbers_V_q1 : IN STD_LOGIC_VECTOR (23 downto 0) );
end;


architecture behav of GenerationGenerator_generateGeneration is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv24_17 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000010111";
    constant ap_const_lv24_1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv17_10000 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_read_fu_150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal storemerge_i_fu_336_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal storemerge_i_reg_661 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_9_reg_672 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_10_reg_679 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_tmp_s_fu_423_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal child1_V_fu_500_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal child2_V_fu_518_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal child2_V_reg_696 : STD_LOGIC_VECTOR (15 downto 0);
    signal val_V_reg_701 : STD_LOGIC_VECTOR (23 downto 0);
    signal j_cast2_fu_524_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_cast2_reg_707 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal j_1_fu_534_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_1_reg_715 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond1_fu_528_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_tmp_1_fu_557_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal child1_V_2_fu_584_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal j1_cast1_fu_590_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal j1_cast1_reg_735 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal j_2_fu_600_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_2_reg_743 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond_fu_594_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_tmp_2_fu_623_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_tmp_2_reg_753 : STD_LOGIC_VECTOR (23 downto 0);
    signal child2_V_2_fu_650_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal GenerationGenerator_5_reg_249 : STD_LOGIC_VECTOR (23 downto 0);
    signal v_V_reg_259 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_reg_270 : STD_LOGIC_VECTOR (4 downto 0);
    signal GenerationGenerator_8_reg_281 : STD_LOGIC_VECTOR (23 downto 0);
    signal v_V_1_reg_291 : STD_LOGIC_VECTOR (15 downto 0);
    signal j1_reg_302 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_fu_319_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_344_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_540_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_606_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_330_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_shl6_fu_353_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_shl6_cast_fu_361_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_7_cast4_fu_349_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_8_fu_365_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal p_shl_fu_385_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_shl_cast_fu_393_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_10_cast3_fu_381_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_7_fu_397_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_5_fu_413_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_418_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_11_fu_432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal highNum_V_fu_436_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal lowNum_V_fu_446_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal lowNum_V_cast_fu_452_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal highNum_V_cast_fu_442_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_16_cast_fu_462_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal rhs_V_fu_466_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_fu_456_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_fu_472_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal bitMask1_V_fu_476_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal bitMask2_V_fu_482_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_1_fu_488_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_2_fu_494_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_3_fu_506_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_4_fu_512_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_14_fu_545_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_551_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_16_fu_566_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal op2_assign_fu_571_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal child1_V_1_fu_576_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_18_fu_611_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_617_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_20_fu_632_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal op2_assign_1_fu_637_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal child2_V_1_fu_642_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '0') then
                ap_CS_fsm <= ap_ST_fsm_state2;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    GenerationGenerator_5_reg_249_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                GenerationGenerator_5_reg_249 <= p_tmp_1_fu_557_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                GenerationGenerator_5_reg_249 <= p_tmp_s_fu_423_p3;
            end if; 
        end if;
    end process;

    GenerationGenerator_8_reg_281_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond1_fu_528_p2 = ap_const_lv1_1))) then 
                GenerationGenerator_8_reg_281 <= GenerationGenerator_5_reg_249;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                GenerationGenerator_8_reg_281 <= p_tmp_2_reg_753;
            end if; 
        end if;
    end process;

    j1_reg_302_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond1_fu_528_p2 = ap_const_lv1_1))) then 
                j1_reg_302 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                j1_reg_302 <= j_2_reg_743;
            end if; 
        end if;
    end process;

    j_reg_270_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                j_reg_270 <= j_1_reg_715;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_reg_270 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    v_V_1_reg_291_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond1_fu_528_p2 = ap_const_lv1_1))) then 
                v_V_1_reg_291 <= child2_V_reg_696;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                v_V_1_reg_291 <= child2_V_2_fu_650_p2;
            end if; 
        end if;
    end process;

    v_V_reg_259_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                v_V_reg_259 <= child1_V_2_fu_584_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                v_V_reg_259 <= child1_V_fu_500_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                child2_V_reg_696 <= child2_V_fu_518_p2;
                val_V_reg_701 <= mutation_probability;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                    j1_cast1_reg_735(4 downto 0) <= j1_cast1_fu_590_p1(4 downto 0);
                j_2_reg_743 <= j_2_fu_600_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                j_1_reg_715 <= j_1_fu_534_p2;
                    j_cast2_reg_707(4 downto 0) <= j_cast2_fu_524_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = exitcond_fu_594_p2))) then
                p_tmp_2_reg_753 <= p_tmp_2_fu_623_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and not((tmp_read_fu_150_p2 = ap_const_lv1_0)))) then
                storemerge_i_reg_661 <= storemerge_i_fu_336_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                tmp_10_reg_679 <= tmp_7_fu_397_p2(28 downto 24);
                tmp_9_reg_672 <= tmp_8_fu_365_p2(28 downto 24);
            end if;
        end if;
    end process;
    j_cast2_reg_707(15 downto 5) <= "00000000000";
    j1_cast1_reg_735(15 downto 5) <= "00000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state2, tmp_read_fu_150_p2, ap_CS_fsm_state5, exitcond1_fu_528_p2, ap_CS_fsm_state7, exitcond_fu_594_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and not((tmp_read_fu_150_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond1_fu_528_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond_fu_594_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;

    GenerationGenerator_randomNumbers_V_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, tmp_s_fu_319_p1, tmp_13_fu_540_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            GenerationGenerator_randomNumbers_V_address0 <= tmp_13_fu_540_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            GenerationGenerator_randomNumbers_V_address0 <= tmp_s_fu_319_p1(8 - 1 downto 0);
        else 
            GenerationGenerator_randomNumbers_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    GenerationGenerator_randomNumbers_V_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state7, tmp_4_fu_344_p1, tmp_17_fu_606_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            GenerationGenerator_randomNumbers_V_address1 <= tmp_17_fu_606_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            GenerationGenerator_randomNumbers_V_address1 <= tmp_4_fu_344_p1(8 - 1 downto 0);
        else 
            GenerationGenerator_randomNumbers_V_address1 <= "XXXXXXXX";
        end if; 
    end process;


    GenerationGenerator_randomNumbers_V_ce0_assign_proc : process(ap_CS_fsm_state2, tmp_read_fu_150_p2, ap_CS_fsm_state5)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and not((tmp_read_fu_150_p2 = ap_const_lv1_0))) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            GenerationGenerator_randomNumbers_V_ce0 <= ap_const_logic_1;
        else 
            GenerationGenerator_randomNumbers_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    GenerationGenerator_randomNumbers_V_ce1_assign_proc : process(ap_CS_fsm_state2, tmp_read_fu_150_p2, ap_CS_fsm_state7)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and not((tmp_read_fu_150_p2 = ap_const_lv1_0))) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            GenerationGenerator_randomNumbers_V_ce1 <= ap_const_logic_1;
        else 
            GenerationGenerator_randomNumbers_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    GenerationGenerator_trueRandomIndex_V_o_assign_proc : process(p_tmp_s_fu_423_p3, ap_CS_fsm_state4, p_tmp_1_fu_557_p3, ap_CS_fsm_state6, ap_CS_fsm_state7, exitcond_fu_594_p2, p_tmp_2_fu_623_p3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = exitcond_fu_594_p2))) then 
            GenerationGenerator_trueRandomIndex_V_o <= p_tmp_2_fu_623_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            GenerationGenerator_trueRandomIndex_V_o <= p_tmp_1_fu_557_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            GenerationGenerator_trueRandomIndex_V_o <= p_tmp_s_fu_423_p3;
        else 
            GenerationGenerator_trueRandomIndex_V_o <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    GenerationGenerator_trueRandomIndex_V_o_ap_vld_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state7, exitcond_fu_594_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = exitcond_fu_594_p2)))) then 
            GenerationGenerator_trueRandomIndex_V_o_ap_vld <= ap_const_logic_1;
        else 
            GenerationGenerator_trueRandomIndex_V_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    bitMask1_V_fu_476_p2 <= (r_V_fu_456_p2 and tmp_12_fu_472_p1);
    bitMask2_V_fu_482_p2 <= (bitMask1_V_fu_476_p2 xor ap_const_lv16_FFFF);
    child1_V_1_fu_576_p3 <= 
        op2_assign_fu_571_p2 when (tmp_16_fu_566_p2(0) = '1') else 
        ap_const_lv16_0;
    child1_V_2_fu_584_p2 <= (child1_V_1_fu_576_p3 xor v_V_reg_259);
    child1_V_fu_500_p2 <= std_logic_vector(unsigned(r_V_1_fu_488_p2) + unsigned(r_V_2_fu_494_p2));
    child2_V_1_fu_642_p3 <= 
        op2_assign_1_fu_637_p2 when (tmp_20_fu_632_p2(0) = '1') else 
        ap_const_lv16_0;
    child2_V_2_fu_650_p2 <= (child2_V_1_fu_642_p3 xor v_V_1_reg_291);
    child2_V_fu_518_p2 <= std_logic_vector(unsigned(r_V_3_fu_506_p2) + unsigned(r_V_4_fu_512_p2));
    exitcond1_fu_528_p2 <= "1" when (j_reg_270 = ap_const_lv5_10) else "0";
    exitcond_fu_594_p2 <= "1" when (j1_reg_302 = ap_const_lv5_10) else "0";

    generatingDone_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state7, exitcond_fu_594_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond_fu_594_p2 = ap_const_lv1_1))) then 
            generatingDone <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            generatingDone <= ap_const_logic_0;
        else 
            generatingDone <= 'X';
        end if; 
    end process;


    generatingDone_ap_vld_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state7, exitcond_fu_594_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond_fu_594_p2 = ap_const_lv1_1)))) then 
            generatingDone_ap_vld <= ap_const_logic_1;
        else 
            generatingDone_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    generation_child1 <= v_V_reg_259;

    generation_child1_ap_vld_assign_proc : process(ap_CS_fsm_state7, exitcond_fu_594_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond_fu_594_p2 = ap_const_lv1_1))) then 
            generation_child1_ap_vld <= ap_const_logic_1;
        else 
            generation_child1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    generation_child2 <= v_V_1_reg_291;

    generation_child2_ap_vld_assign_proc : process(ap_CS_fsm_state7, exitcond_fu_594_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond_fu_594_p2 = ap_const_lv1_1))) then 
            generation_child2_ap_vld <= ap_const_logic_1;
        else 
            generation_child2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

        highNum_V_cast_fu_442_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(highNum_V_fu_436_p3),16));

    highNum_V_fu_436_p3 <= 
        tmp_9_reg_672 when (tmp_11_fu_432_p2(0) = '1') else 
        tmp_10_reg_679;
    j1_cast1_fu_590_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j1_reg_302),16));
    j_1_fu_534_p2 <= std_logic_vector(unsigned(j_reg_270) + unsigned(ap_const_lv5_1));
    j_2_fu_600_p2 <= std_logic_vector(unsigned(j1_reg_302) + unsigned(ap_const_lv5_1));
    j_cast2_fu_524_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_270),16));
        lowNum_V_cast_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lowNum_V_fu_446_p3),16));

    lowNum_V_fu_446_p3 <= 
        tmp_10_reg_679 when (tmp_11_fu_432_p2(0) = '1') else 
        tmp_9_reg_672;
    op2_assign_1_fu_637_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv16_1),to_integer(unsigned('0' & j1_cast1_reg_735(16-1 downto 0)))));
    op2_assign_fu_571_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv16_1),to_integer(unsigned('0' & j_cast2_reg_707(16-1 downto 0)))));
    p_shl6_cast_fu_361_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl6_fu_353_p3),29));
    p_shl6_fu_353_p3 <= (GenerationGenerator_randomNumbers_V_q0 & ap_const_lv4_0);
    p_shl_cast_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_385_p3),29));
    p_shl_fu_385_p3 <= (GenerationGenerator_randomNumbers_V_q1 & ap_const_lv4_0);
    p_tmp_1_fu_557_p3 <= 
        ap_const_lv24_0 when (tmp_14_fu_545_p2(0) = '1') else 
        tmp_15_fu_551_p2;
    p_tmp_2_fu_623_p3 <= 
        ap_const_lv24_0 when (tmp_18_fu_611_p2(0) = '1') else 
        tmp_19_fu_617_p2;
    p_tmp_s_fu_423_p3 <= 
        ap_const_lv24_0 when (tmp_5_fu_413_p2(0) = '1') else 
        tmp_6_fu_418_p2;
    r_V_1_fu_488_p2 <= (generation_parent1 and bitMask1_V_fu_476_p2);
    r_V_2_fu_494_p2 <= (generation_parent2 and bitMask2_V_fu_482_p2);
    r_V_3_fu_506_p2 <= (generation_parent1 and bitMask2_V_fu_482_p2);
    r_V_4_fu_512_p2 <= (generation_parent2 and bitMask1_V_fu_476_p2);
    r_V_fu_456_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv16_FFFF),to_integer(unsigned('0' & lowNum_V_cast_fu_452_p1(16-1 downto 0)))));
    rhs_V_fu_466_p2 <= std_logic_vector(shift_right(signed(ap_const_lv17_10000),to_integer(unsigned('0' & tmp_16_cast_fu_462_p1(17-1 downto 0)))));
    storemerge_i_fu_336_p3 <= 
        ap_const_lv24_0 when (tmp_2_fu_324_p2(0) = '1') else 
        tmp_3_fu_330_p2;
    tmp_10_cast3_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(GenerationGenerator_randomNumbers_V_q1),29));
    tmp_11_fu_432_p2 <= "1" when (unsigned(tmp_9_reg_672) > unsigned(tmp_10_reg_679)) else "0";
    tmp_12_fu_472_p1 <= rhs_V_fu_466_p2(16 - 1 downto 0);
    tmp_13_fu_540_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(GenerationGenerator_5_reg_249),32));
    tmp_14_fu_545_p2 <= "1" when (GenerationGenerator_5_reg_249 = ap_const_lv24_17) else "0";
    tmp_15_fu_551_p2 <= std_logic_vector(unsigned(GenerationGenerator_5_reg_249) + unsigned(ap_const_lv24_1));
    tmp_16_cast_fu_462_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(highNum_V_cast_fu_442_p1),17));
    tmp_16_fu_566_p2 <= "1" when (unsigned(GenerationGenerator_randomNumbers_V_q0) < unsigned(val_V_reg_701)) else "0";
    tmp_17_fu_606_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(GenerationGenerator_8_reg_281),32));
    tmp_18_fu_611_p2 <= "1" when (GenerationGenerator_8_reg_281 = ap_const_lv24_17) else "0";
    tmp_19_fu_617_p2 <= std_logic_vector(unsigned(GenerationGenerator_8_reg_281) + unsigned(ap_const_lv24_1));
    tmp_20_fu_632_p2 <= "1" when (unsigned(GenerationGenerator_randomNumbers_V_q1) < unsigned(val_V_reg_701)) else "0";
    tmp_2_fu_324_p2 <= "1" when (GenerationGenerator_trueRandomIndex_V_i = ap_const_lv24_17) else "0";
    tmp_3_fu_330_p2 <= std_logic_vector(unsigned(ap_const_lv24_1) + unsigned(GenerationGenerator_trueRandomIndex_V_i));
    tmp_4_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(storemerge_i_fu_336_p3),32));
    tmp_5_fu_413_p2 <= "1" when (storemerge_i_reg_661 = ap_const_lv24_17) else "0";
    tmp_6_fu_418_p2 <= std_logic_vector(unsigned(ap_const_lv24_1) + unsigned(storemerge_i_reg_661));
    tmp_7_cast4_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(GenerationGenerator_randomNumbers_V_q0),29));
    tmp_7_fu_397_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_393_p1) - unsigned(tmp_10_cast3_fu_381_p1));
    tmp_8_fu_365_p2 <= std_logic_vector(unsigned(p_shl6_cast_fu_361_p1) - unsigned(tmp_7_cast4_fu_349_p1));
    tmp_read_fu_150_p2 <= (0=>startGenerating, others=>'-');
    tmp_s_fu_319_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(GenerationGenerator_trueRandomIndex_V_i),32));
end behav;
