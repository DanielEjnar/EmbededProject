// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module GenerationGenerator_generateGeneration (
        ap_clk,
        ap_rst,
        startGenerating,
        generatingDone,
        generatingDone_ap_vld,
        generation_parent1,
        generation_parent2,
        generation_child1,
        generation_child1_ap_vld,
        generation_child2,
        generation_child2_ap_vld,
        mutation_probability,
        GenerationGenerator_trueRandomIndex_V_i,
        GenerationGenerator_trueRandomIndex_V_o,
        GenerationGenerator_trueRandomIndex_V_o_ap_vld,
        GenerationGenerator_randomNumbers_V_address0,
        GenerationGenerator_randomNumbers_V_ce0,
        GenerationGenerator_randomNumbers_V_q0,
        GenerationGenerator_randomNumbers_V_address1,
        GenerationGenerator_randomNumbers_V_ce1,
        GenerationGenerator_randomNumbers_V_q1
);

parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   startGenerating;
output   generatingDone;
output   generatingDone_ap_vld;
input  [15:0] generation_parent1;
input  [15:0] generation_parent2;
output  [15:0] generation_child1;
output   generation_child1_ap_vld;
output  [15:0] generation_child2;
output   generation_child2_ap_vld;
input  [23:0] mutation_probability;
input  [23:0] GenerationGenerator_trueRandomIndex_V_i;
output  [23:0] GenerationGenerator_trueRandomIndex_V_o;
output   GenerationGenerator_trueRandomIndex_V_o_ap_vld;
output  [7:0] GenerationGenerator_randomNumbers_V_address0;
output   GenerationGenerator_randomNumbers_V_ce0;
input  [23:0] GenerationGenerator_randomNumbers_V_q0;
output  [7:0] GenerationGenerator_randomNumbers_V_address1;
output   GenerationGenerator_randomNumbers_V_ce1;
input  [23:0] GenerationGenerator_randomNumbers_V_q1;

reg generatingDone;
reg generatingDone_ap_vld;
reg generation_child1_ap_vld;
reg generation_child2_ap_vld;
reg[23:0] GenerationGenerator_trueRandomIndex_V_o;
reg GenerationGenerator_trueRandomIndex_V_o_ap_vld;
reg[7:0] GenerationGenerator_randomNumbers_V_address0;
reg GenerationGenerator_randomNumbers_V_ce0;
reg[7:0] GenerationGenerator_randomNumbers_V_address1;
reg GenerationGenerator_randomNumbers_V_ce1;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_read_fu_150_p2;
wire   [23:0] storemerge_i_fu_336_p3;
reg   [23:0] storemerge_i_reg_661;
reg   [4:0] tmp_9_reg_672;
wire    ap_CS_fsm_state3;
reg   [4:0] tmp_10_reg_679;
wire   [23:0] p_tmp_s_fu_423_p3;
wire    ap_CS_fsm_state4;
wire   [15:0] child1_V_fu_500_p2;
wire   [15:0] child2_V_fu_518_p2;
reg   [15:0] child2_V_reg_696;
reg   [23:0] val_V_reg_701;
wire   [15:0] j_cast2_fu_524_p1;
reg   [15:0] j_cast2_reg_707;
wire    ap_CS_fsm_state5;
wire   [4:0] j_1_fu_534_p2;
reg   [4:0] j_1_reg_715;
wire   [0:0] exitcond1_fu_528_p2;
wire   [23:0] p_tmp_1_fu_557_p3;
wire    ap_CS_fsm_state6;
wire   [15:0] child1_V_2_fu_584_p2;
wire   [15:0] j1_cast1_fu_590_p1;
reg   [15:0] j1_cast1_reg_735;
wire    ap_CS_fsm_state7;
wire   [4:0] j_2_fu_600_p2;
reg   [4:0] j_2_reg_743;
wire   [0:0] exitcond_fu_594_p2;
wire   [23:0] p_tmp_2_fu_623_p3;
reg   [23:0] p_tmp_2_reg_753;
wire   [15:0] child2_V_2_fu_650_p2;
wire    ap_CS_fsm_state8;
reg   [23:0] GenerationGenerator_5_reg_249;
reg   [15:0] v_V_reg_259;
reg   [4:0] j_reg_270;
reg   [23:0] GenerationGenerator_8_reg_281;
reg   [15:0] v_V_1_reg_291;
reg   [4:0] j1_reg_302;
wire   [31:0] tmp_s_fu_319_p1;
wire   [31:0] tmp_4_fu_344_p1;
wire   [31:0] tmp_13_fu_540_p1;
wire   [31:0] tmp_17_fu_606_p1;
wire   [0:0] tmp_2_fu_324_p2;
wire   [23:0] tmp_3_fu_330_p2;
wire   [27:0] p_shl6_fu_353_p3;
wire   [28:0] p_shl6_cast_fu_361_p1;
wire   [28:0] tmp_7_cast4_fu_349_p1;
wire   [28:0] tmp_8_fu_365_p2;
wire   [27:0] p_shl_fu_385_p3;
wire   [28:0] p_shl_cast_fu_393_p1;
wire   [28:0] tmp_10_cast3_fu_381_p1;
wire   [28:0] tmp_7_fu_397_p2;
wire   [0:0] tmp_5_fu_413_p2;
wire   [23:0] tmp_6_fu_418_p2;
wire   [0:0] tmp_11_fu_432_p2;
wire   [4:0] highNum_V_fu_436_p3;
wire   [4:0] lowNum_V_fu_446_p3;
wire  signed [15:0] lowNum_V_cast_fu_452_p1;
wire  signed [15:0] highNum_V_cast_fu_442_p1;
wire   [16:0] tmp_16_cast_fu_462_p1;
wire   [16:0] rhs_V_fu_466_p2;
wire   [15:0] r_V_fu_456_p2;
wire   [15:0] tmp_12_fu_472_p1;
wire   [15:0] bitMask1_V_fu_476_p2;
wire   [15:0] bitMask2_V_fu_482_p2;
wire   [15:0] r_V_1_fu_488_p2;
wire   [15:0] r_V_2_fu_494_p2;
wire   [15:0] r_V_3_fu_506_p2;
wire   [15:0] r_V_4_fu_512_p2;
wire   [0:0] tmp_14_fu_545_p2;
wire   [23:0] tmp_15_fu_551_p2;
wire   [0:0] tmp_16_fu_566_p2;
wire   [15:0] op2_assign_fu_571_p2;
wire   [15:0] child1_V_1_fu_576_p3;
wire   [0:0] tmp_18_fu_611_p2;
wire   [23:0] tmp_19_fu_617_p2;
wire   [0:0] tmp_20_fu_632_p2;
wire   [15:0] op2_assign_1_fu_637_p2;
wire   [15:0] child2_V_1_fu_642_p3;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd2;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b0) begin
        ap_CS_fsm <= ap_ST_fsm_state2;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        GenerationGenerator_5_reg_249 <= p_tmp_1_fu_557_p3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        GenerationGenerator_5_reg_249 <= p_tmp_s_fu_423_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond1_fu_528_p2 == 1'd1))) begin
        GenerationGenerator_8_reg_281 <= GenerationGenerator_5_reg_249;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        GenerationGenerator_8_reg_281 <= p_tmp_2_reg_753;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond1_fu_528_p2 == 1'd1))) begin
        j1_reg_302 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        j1_reg_302 <= j_2_reg_743;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_reg_270 <= j_1_reg_715;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        j_reg_270 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond1_fu_528_p2 == 1'd1))) begin
        v_V_1_reg_291 <= child2_V_reg_696;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        v_V_1_reg_291 <= child2_V_2_fu_650_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        v_V_reg_259 <= child1_V_2_fu_584_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        v_V_reg_259 <= child1_V_fu_500_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        child2_V_reg_696 <= child2_V_fu_518_p2;
        val_V_reg_701 <= mutation_probability;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        j1_cast1_reg_735[4 : 0] <= j1_cast1_fu_590_p1[4 : 0];
        j_2_reg_743 <= j_2_fu_600_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        j_1_reg_715 <= j_1_fu_534_p2;
        j_cast2_reg_707[4 : 0] <= j_cast2_fu_524_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == exitcond_fu_594_p2))) begin
        p_tmp_2_reg_753 <= p_tmp_2_fu_623_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~(tmp_read_fu_150_p2 == 1'd0))) begin
        storemerge_i_reg_661 <= storemerge_i_fu_336_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_10_reg_679 <= {{tmp_7_fu_397_p2[28:24]}};
        tmp_9_reg_672 <= {{tmp_8_fu_365_p2[28:24]}};
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        GenerationGenerator_randomNumbers_V_address0 = tmp_13_fu_540_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        GenerationGenerator_randomNumbers_V_address0 = tmp_s_fu_319_p1;
    end else begin
        GenerationGenerator_randomNumbers_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        GenerationGenerator_randomNumbers_V_address1 = tmp_17_fu_606_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        GenerationGenerator_randomNumbers_V_address1 = tmp_4_fu_344_p1;
    end else begin
        GenerationGenerator_randomNumbers_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & ~(tmp_read_fu_150_p2 == 1'd0)) | (1'b1 == ap_CS_fsm_state5))) begin
        GenerationGenerator_randomNumbers_V_ce0 = 1'b1;
    end else begin
        GenerationGenerator_randomNumbers_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & ~(tmp_read_fu_150_p2 == 1'd0)) | (1'b1 == ap_CS_fsm_state7))) begin
        GenerationGenerator_randomNumbers_V_ce1 = 1'b1;
    end else begin
        GenerationGenerator_randomNumbers_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == exitcond_fu_594_p2))) begin
        GenerationGenerator_trueRandomIndex_V_o = p_tmp_2_fu_623_p3;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        GenerationGenerator_trueRandomIndex_V_o = p_tmp_1_fu_557_p3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        GenerationGenerator_trueRandomIndex_V_o = p_tmp_s_fu_423_p3;
    end else begin
        GenerationGenerator_trueRandomIndex_V_o = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state7) & (1'd0 == exitcond_fu_594_p2)))) begin
        GenerationGenerator_trueRandomIndex_V_o_ap_vld = 1'b1;
    end else begin
        GenerationGenerator_trueRandomIndex_V_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (exitcond_fu_594_p2 == 1'd1))) begin
        generatingDone = 1'd1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        generatingDone = 1'd0;
    end else begin
        generatingDone = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state7) & (exitcond_fu_594_p2 == 1'd1)))) begin
        generatingDone_ap_vld = 1'b1;
    end else begin
        generatingDone_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (exitcond_fu_594_p2 == 1'd1))) begin
        generation_child1_ap_vld = 1'b1;
    end else begin
        generation_child1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (exitcond_fu_594_p2 == 1'd1))) begin
        generation_child2_ap_vld = 1'b1;
    end else begin
        generation_child2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & ~(tmp_read_fu_150_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (exitcond1_fu_528_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (exitcond_fu_594_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign bitMask1_V_fu_476_p2 = (r_V_fu_456_p2 & tmp_12_fu_472_p1);

assign bitMask2_V_fu_482_p2 = (bitMask1_V_fu_476_p2 ^ 16'd65535);

assign child1_V_1_fu_576_p3 = ((tmp_16_fu_566_p2[0:0] === 1'b1) ? op2_assign_fu_571_p2 : 16'd0);

assign child1_V_2_fu_584_p2 = (child1_V_1_fu_576_p3 ^ v_V_reg_259);

assign child1_V_fu_500_p2 = (r_V_1_fu_488_p2 + r_V_2_fu_494_p2);

assign child2_V_1_fu_642_p3 = ((tmp_20_fu_632_p2[0:0] === 1'b1) ? op2_assign_1_fu_637_p2 : 16'd0);

assign child2_V_2_fu_650_p2 = (child2_V_1_fu_642_p3 ^ v_V_1_reg_291);

assign child2_V_fu_518_p2 = (r_V_3_fu_506_p2 + r_V_4_fu_512_p2);

assign exitcond1_fu_528_p2 = ((j_reg_270 == 5'd16) ? 1'b1 : 1'b0);

assign exitcond_fu_594_p2 = ((j1_reg_302 == 5'd16) ? 1'b1 : 1'b0);

assign generation_child1 = v_V_reg_259;

assign generation_child2 = v_V_1_reg_291;

assign highNum_V_cast_fu_442_p1 = $signed(highNum_V_fu_436_p3);

assign highNum_V_fu_436_p3 = ((tmp_11_fu_432_p2[0:0] === 1'b1) ? tmp_9_reg_672 : tmp_10_reg_679);

assign j1_cast1_fu_590_p1 = j1_reg_302;

assign j_1_fu_534_p2 = (j_reg_270 + 5'd1);

assign j_2_fu_600_p2 = (j1_reg_302 + 5'd1);

assign j_cast2_fu_524_p1 = j_reg_270;

assign lowNum_V_cast_fu_452_p1 = $signed(lowNum_V_fu_446_p3);

assign lowNum_V_fu_446_p3 = ((tmp_11_fu_432_p2[0:0] === 1'b1) ? tmp_10_reg_679 : tmp_9_reg_672);

assign op2_assign_1_fu_637_p2 = 16'd1 << j1_cast1_reg_735;

assign op2_assign_fu_571_p2 = 16'd1 << j_cast2_reg_707;

assign p_shl6_cast_fu_361_p1 = p_shl6_fu_353_p3;

assign p_shl6_fu_353_p3 = {{GenerationGenerator_randomNumbers_V_q0}, {4'd0}};

assign p_shl_cast_fu_393_p1 = p_shl_fu_385_p3;

assign p_shl_fu_385_p3 = {{GenerationGenerator_randomNumbers_V_q1}, {4'd0}};

assign p_tmp_1_fu_557_p3 = ((tmp_14_fu_545_p2[0:0] === 1'b1) ? 24'd0 : tmp_15_fu_551_p2);

assign p_tmp_2_fu_623_p3 = ((tmp_18_fu_611_p2[0:0] === 1'b1) ? 24'd0 : tmp_19_fu_617_p2);

assign p_tmp_s_fu_423_p3 = ((tmp_5_fu_413_p2[0:0] === 1'b1) ? 24'd0 : tmp_6_fu_418_p2);

assign r_V_1_fu_488_p2 = (generation_parent1 & bitMask1_V_fu_476_p2);

assign r_V_2_fu_494_p2 = (generation_parent2 & bitMask2_V_fu_482_p2);

assign r_V_3_fu_506_p2 = (generation_parent1 & bitMask2_V_fu_482_p2);

assign r_V_4_fu_512_p2 = (generation_parent2 & bitMask1_V_fu_476_p2);

assign r_V_fu_456_p2 = 16'd65535 >> lowNum_V_cast_fu_452_p1;

assign rhs_V_fu_466_p2 = $signed(17'd65536) >>> tmp_16_cast_fu_462_p1;

assign storemerge_i_fu_336_p3 = ((tmp_2_fu_324_p2[0:0] === 1'b1) ? 24'd0 : tmp_3_fu_330_p2);

assign tmp_10_cast3_fu_381_p1 = GenerationGenerator_randomNumbers_V_q1;

assign tmp_11_fu_432_p2 = ((tmp_9_reg_672 > tmp_10_reg_679) ? 1'b1 : 1'b0);

assign tmp_12_fu_472_p1 = rhs_V_fu_466_p2[15:0];

assign tmp_13_fu_540_p1 = GenerationGenerator_5_reg_249;

assign tmp_14_fu_545_p2 = ((GenerationGenerator_5_reg_249 == 24'd23) ? 1'b1 : 1'b0);

assign tmp_15_fu_551_p2 = (GenerationGenerator_5_reg_249 + 24'd1);

assign tmp_16_cast_fu_462_p1 = $unsigned(highNum_V_cast_fu_442_p1);

assign tmp_16_fu_566_p2 = ((GenerationGenerator_randomNumbers_V_q0 < val_V_reg_701) ? 1'b1 : 1'b0);

assign tmp_17_fu_606_p1 = GenerationGenerator_8_reg_281;

assign tmp_18_fu_611_p2 = ((GenerationGenerator_8_reg_281 == 24'd23) ? 1'b1 : 1'b0);

assign tmp_19_fu_617_p2 = (GenerationGenerator_8_reg_281 + 24'd1);

assign tmp_20_fu_632_p2 = ((GenerationGenerator_randomNumbers_V_q1 < val_V_reg_701) ? 1'b1 : 1'b0);

assign tmp_2_fu_324_p2 = ((GenerationGenerator_trueRandomIndex_V_i == 24'd23) ? 1'b1 : 1'b0);

assign tmp_3_fu_330_p2 = (24'd1 + GenerationGenerator_trueRandomIndex_V_i);

assign tmp_4_fu_344_p1 = storemerge_i_fu_336_p3;

assign tmp_5_fu_413_p2 = ((storemerge_i_reg_661 == 24'd23) ? 1'b1 : 1'b0);

assign tmp_6_fu_418_p2 = (24'd1 + storemerge_i_reg_661);

assign tmp_7_cast4_fu_349_p1 = GenerationGenerator_randomNumbers_V_q0;

assign tmp_7_fu_397_p2 = (p_shl_cast_fu_393_p1 - tmp_10_cast3_fu_381_p1);

assign tmp_8_fu_365_p2 = (p_shl6_cast_fu_361_p1 - tmp_7_cast4_fu_349_p1);

assign tmp_read_fu_150_p2 = startGenerating;

assign tmp_s_fu_319_p1 = GenerationGenerator_trueRandomIndex_V_i;

always @ (posedge ap_clk) begin
    j_cast2_reg_707[15:5] <= 11'b00000000000;
    j1_cast1_reg_735[15:5] <= 11'b00000000000;
end

endmodule //GenerationGenerator_generateGeneration
