// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module GenerationGenerator_generateGeneration (
        ap_clk,
        ap_rst,
        startGenerating,
        generatingDone,
        generatingDone_ap_vld,
        generation_parent1,
        generation_parent2,
        generation_child1,
        generation_child1_ap_vld,
        generation_child2,
        generation_child2_ap_vld,
        mutation_probability,
        GenerationGenerator_trueRandomIndex_V_i,
        GenerationGenerator_trueRandomIndex_V_o,
        GenerationGenerator_trueRandomIndex_V_o_ap_vld,
        GenerationGenerator_randomNumbers_V_address0,
        GenerationGenerator_randomNumbers_V_ce0,
        GenerationGenerator_randomNumbers_V_q0
);

parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_state10 = 12'd512;
parameter    ap_ST_fsm_state11 = 12'd1024;
parameter    ap_ST_fsm_state12 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   startGenerating;
output   generatingDone;
output   generatingDone_ap_vld;
input  [63:0] generation_parent1;
input  [63:0] generation_parent2;
output  [63:0] generation_child1;
output   generation_child1_ap_vld;
output  [63:0] generation_child2;
output   generation_child2_ap_vld;
input  [23:0] mutation_probability;
input  [23:0] GenerationGenerator_trueRandomIndex_V_i;
output  [23:0] GenerationGenerator_trueRandomIndex_V_o;
output   GenerationGenerator_trueRandomIndex_V_o_ap_vld;
output  [7:0] GenerationGenerator_randomNumbers_V_address0;
output   GenerationGenerator_randomNumbers_V_ce0;
input  [23:0] GenerationGenerator_randomNumbers_V_q0;

reg generatingDone;
reg generatingDone_ap_vld;
reg generation_child1_ap_vld;
reg generation_child2_ap_vld;
reg[23:0] GenerationGenerator_trueRandomIndex_V_o;
reg GenerationGenerator_trueRandomIndex_V_o_ap_vld;
reg[7:0] GenerationGenerator_randomNumbers_V_address0;
reg GenerationGenerator_randomNumbers_V_ce0;

reg   [63:0] val_V_3_reg_480;
(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state2;
wire   [0:0] grp_read_fu_138_p2;
reg   [63:0] val_V_4_reg_485;
wire   [23:0] p_tmp_s_fu_327_p3;
reg   [23:0] p_tmp_s_reg_490;
wire    ap_CS_fsm_state3;
reg   [23:0] val_V_reg_495;
wire    ap_CS_fsm_state4;
wire   [6:0] j_1_fu_342_p2;
reg   [6:0] j_1_reg_503;
wire    ap_CS_fsm_state6;
wire   [0:0] exitcond1_fu_336_p2;
wire   [23:0] p_tmp_1_fu_369_p3;
wire    ap_CS_fsm_state7;
wire   [63:0] child1_V_2_fu_396_p2;
wire   [6:0] j_2_fu_408_p2;
reg   [6:0] j_2_reg_526;
wire    ap_CS_fsm_state9;
wire   [0:0] exitcond_fu_402_p2;
wire   [23:0] p_tmp_2_fu_431_p3;
reg   [23:0] p_tmp_2_reg_536;
wire   [63:0] child2_V_2_fu_462_p2;
wire    ap_CS_fsm_state10;
reg   [23:0] GenerationGenerator_1_reg_218;
wire    ap_CS_fsm_state5;
reg   [63:0] v_V_reg_228;
reg   [6:0] j_reg_239;
reg   [23:0] GenerationGenerator_4_reg_251;
wire    ap_CS_fsm_state8;
reg   [63:0] v_V_1_reg_261;
reg   [6:0] j1_reg_272;
wire   [31:0] tmp_9_fu_348_p1;
wire   [31:0] tmp_13_fu_414_p1;
wire    ap_CS_fsm_state12;
wire   [0:0] tmp_11_fu_468_p2;
wire    ap_CS_fsm_state11;
wire   [0:0] tmp_3_fu_295_p2;
wire   [23:0] tmp_4_fu_301_p2;
wire   [23:0] storemerge_i_fu_307_p3;
wire   [0:0] tmp_6_fu_315_p2;
wire   [23:0] tmp_7_fu_321_p2;
wire   [0:0] tmp_s_fu_357_p2;
wire   [23:0] tmp_1_fu_363_p2;
wire   [31:0] j_cast2_fu_353_p1;
wire   [0:0] grp_fu_284_p2;
wire   [31:0] op2_assign_fu_378_p2;
wire   [31:0] child1_V_1_fu_384_p3;
wire  signed [63:0] child1_V_1_cast_fu_392_p1;
wire   [0:0] tmp_14_fu_419_p2;
wire   [23:0] tmp_15_fu_425_p2;
wire   [31:0] j1_cast1_fu_440_p1;
wire   [31:0] op2_assign_1_fu_444_p2;
wire   [31:0] child2_V_1_fu_450_p3;
wire  signed [63:0] child2_V_1_cast_fu_458_p1;
wire   [0:0] tmp_11_fu_468_p0;
reg   [11:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd2;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b0) begin
        ap_CS_fsm <= ap_ST_fsm_state2;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        GenerationGenerator_1_reg_218 <= p_tmp_1_fu_369_p3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        GenerationGenerator_1_reg_218 <= p_tmp_s_reg_490;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        GenerationGenerator_4_reg_251 <= GenerationGenerator_1_reg_218;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        GenerationGenerator_4_reg_251 <= p_tmp_2_reg_536;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        j1_reg_272 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        j1_reg_272 <= j_2_reg_526;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        j_reg_239 <= j_1_reg_503;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        j_reg_239 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        v_V_1_reg_261 <= val_V_3_reg_480;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        v_V_1_reg_261 <= child2_V_2_fu_462_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        v_V_reg_228 <= child1_V_2_fu_396_p2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        v_V_reg_228 <= val_V_4_reg_485;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_1_reg_503 <= j_1_fu_342_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        j_2_reg_526 <= j_2_fu_408_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'd0 == exitcond_fu_402_p2))) begin
        p_tmp_2_reg_536 <= p_tmp_2_fu_431_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        p_tmp_s_reg_490 <= p_tmp_s_fu_327_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~(grp_read_fu_138_p2 == 1'd0))) begin
        val_V_3_reg_480 <= generation_parent1;
        val_V_4_reg_485 <= generation_parent2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        val_V_reg_495 <= mutation_probability;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        GenerationGenerator_randomNumbers_V_address0 = tmp_13_fu_414_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        GenerationGenerator_randomNumbers_V_address0 = tmp_9_fu_348_p1;
    end else begin
        GenerationGenerator_randomNumbers_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state9))) begin
        GenerationGenerator_randomNumbers_V_ce0 = 1'b1;
    end else begin
        GenerationGenerator_randomNumbers_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'd0 == exitcond_fu_402_p2))) begin
        GenerationGenerator_trueRandomIndex_V_o = p_tmp_2_fu_431_p3;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        GenerationGenerator_trueRandomIndex_V_o = p_tmp_1_fu_369_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        GenerationGenerator_trueRandomIndex_V_o = p_tmp_s_fu_327_p3;
    end else begin
        GenerationGenerator_trueRandomIndex_V_o = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state9) & (1'd0 == exitcond_fu_402_p2)))) begin
        GenerationGenerator_trueRandomIndex_V_o_ap_vld = 1'b1;
    end else begin
        GenerationGenerator_trueRandomIndex_V_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        generatingDone = 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state2) & ~(grp_read_fu_138_p2 == 1'd0))) begin
        generatingDone = 1'd0;
    end else begin
        generatingDone = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & ~(grp_read_fu_138_p2 == 1'd0)) | (1'b1 == ap_CS_fsm_state11))) begin
        generatingDone_ap_vld = 1'b1;
    end else begin
        generatingDone_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        generation_child1_ap_vld = 1'b1;
    end else begin
        generation_child1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        generation_child2_ap_vld = 1'b1;
    end else begin
        generation_child2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & ~(grp_read_fu_138_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == exitcond1_fu_336_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (1'd0 == exitcond_fu_402_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & ~(1'd0 == tmp_11_fu_468_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign child1_V_1_cast_fu_392_p1 = $signed(child1_V_1_fu_384_p3);

assign child1_V_1_fu_384_p3 = ((grp_fu_284_p2[0:0] === 1'b1) ? op2_assign_fu_378_p2 : 32'd0);

assign child1_V_2_fu_396_p2 = (child1_V_1_cast_fu_392_p1 ^ v_V_reg_228);

assign child2_V_1_cast_fu_458_p1 = $signed(child2_V_1_fu_450_p3);

assign child2_V_1_fu_450_p3 = ((grp_fu_284_p2[0:0] === 1'b1) ? op2_assign_1_fu_444_p2 : 32'd0);

assign child2_V_2_fu_462_p2 = (child2_V_1_cast_fu_458_p1 ^ v_V_1_reg_261);

assign exitcond1_fu_336_p2 = ((j_reg_239 == 7'd64) ? 1'b1 : 1'b0);

assign exitcond_fu_402_p2 = ((j1_reg_272 == 7'd64) ? 1'b1 : 1'b0);

assign generation_child1 = v_V_reg_228;

assign generation_child2 = v_V_1_reg_261;

assign grp_fu_284_p2 = ((GenerationGenerator_randomNumbers_V_q0 < val_V_reg_495) ? 1'b1 : 1'b0);

assign grp_read_fu_138_p2 = startGenerating;

assign j1_cast1_fu_440_p1 = j1_reg_272;

assign j_1_fu_342_p2 = (j_reg_239 + 7'd1);

assign j_2_fu_408_p2 = (j1_reg_272 + 7'd1);

assign j_cast2_fu_353_p1 = j_reg_239;

assign op2_assign_1_fu_444_p2 = 32'd1 << j1_cast1_fu_440_p1;

assign op2_assign_fu_378_p2 = 32'd1 << j_cast2_fu_353_p1;

assign p_tmp_1_fu_369_p3 = ((tmp_s_fu_357_p2[0:0] === 1'b1) ? 24'd0 : tmp_1_fu_363_p2);

assign p_tmp_2_fu_431_p3 = ((tmp_14_fu_419_p2[0:0] === 1'b1) ? 24'd0 : tmp_15_fu_425_p2);

assign p_tmp_s_fu_327_p3 = ((tmp_6_fu_315_p2[0:0] === 1'b1) ? 24'd0 : tmp_7_fu_321_p2);

assign storemerge_i_fu_307_p3 = ((tmp_3_fu_295_p2[0:0] === 1'b1) ? 24'd0 : tmp_4_fu_301_p2);

assign tmp_11_fu_468_p0 = startGenerating;

assign tmp_11_fu_468_p2 = (tmp_11_fu_468_p0 ^ 1'd1);

assign tmp_13_fu_414_p1 = GenerationGenerator_4_reg_251;

assign tmp_14_fu_419_p2 = ((GenerationGenerator_4_reg_251 == 24'd23) ? 1'b1 : 1'b0);

assign tmp_15_fu_425_p2 = (GenerationGenerator_4_reg_251 + 24'd1);

assign tmp_1_fu_363_p2 = (GenerationGenerator_1_reg_218 + 24'd1);

assign tmp_3_fu_295_p2 = ((GenerationGenerator_trueRandomIndex_V_i == 24'd23) ? 1'b1 : 1'b0);

assign tmp_4_fu_301_p2 = (GenerationGenerator_trueRandomIndex_V_i + 24'd1);

assign tmp_6_fu_315_p2 = ((storemerge_i_fu_307_p3 == 24'd23) ? 1'b1 : 1'b0);

assign tmp_7_fu_321_p2 = (storemerge_i_fu_307_p3 + 24'd1);

assign tmp_9_fu_348_p1 = GenerationGenerator_1_reg_218;

assign tmp_s_fu_357_p2 = ((GenerationGenerator_1_reg_218 == 24'd23) ? 1'b1 : 1'b0);

endmodule //GenerationGenerator_generateGeneration
