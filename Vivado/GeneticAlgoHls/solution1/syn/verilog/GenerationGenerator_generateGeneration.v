// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module GenerationGenerator_generateGeneration (
        ap_clk,
        ap_rst,
        startGenerating,
        generatingDone,
        generatingDone_ap_vld,
        generation_parent1,
        generation_parent2,
        generation_child1,
        generation_child1_ap_vld,
        generation_child2,
        generation_child2_ap_vld,
        mutation_probability
);

parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_state5 = 14'd16;
parameter    ap_ST_fsm_state6 = 14'd32;
parameter    ap_ST_fsm_state7 = 14'd64;
parameter    ap_ST_fsm_state8 = 14'd128;
parameter    ap_ST_fsm_state9 = 14'd256;
parameter    ap_ST_fsm_state10 = 14'd512;
parameter    ap_ST_fsm_state11 = 14'd1024;
parameter    ap_ST_fsm_state12 = 14'd2048;
parameter    ap_ST_fsm_state13 = 14'd4096;
parameter    ap_ST_fsm_state14 = 14'd8192;

input   ap_clk;
input   ap_rst;
input   startGenerating;
output   generatingDone;
output   generatingDone_ap_vld;
input  [63:0] generation_parent1;
input  [63:0] generation_parent2;
output  [63:0] generation_child1;
output   generation_child1_ap_vld;
output  [63:0] generation_child2;
output   generation_child2_ap_vld;
input  [23:0] mutation_probability;

reg generatingDone;
reg generatingDone_ap_vld;
reg generation_child1_ap_vld;
reg generation_child2_ap_vld;

reg   [63:0] val_V_3_reg_323;
(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state3;
reg   [63:0] val_V_4_reg_328;
wire    ap_CS_fsm_state4;
wire   [0:0] tmp_s_fu_227_p2;
reg   [0:0] tmp_s_reg_333;
wire    ap_CS_fsm_state6;
wire   [6:0] j_1_fu_239_p2;
wire    ap_CS_fsm_state8;
wire   [63:0] child1_V_2_fu_266_p2;
wire   [0:0] exitcond1_fu_233_p2;
wire   [6:0] j_2_fu_278_p2;
wire    ap_CS_fsm_state10;
wire   [63:0] child2_V_2_fu_305_p2;
wire   [0:0] exitcond_fu_272_p2;
reg   [63:0] v_V_reg_177;
wire    ap_CS_fsm_state7;
reg   [6:0] j_reg_188;
reg   [63:0] v_V_1_reg_199;
wire    ap_CS_fsm_state9;
reg   [6:0] j1_reg_210;
wire   [0:0] grp_read_fu_130_p2;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state14;
wire   [0:0] tmp_1_fu_311_p2;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire   [31:0] j_cast3_fu_245_p1;
wire   [31:0] op2_assign_fu_249_p2;
wire   [31:0] child1_V_fu_255_p3;
wire  signed [63:0] child1_V_cast_fu_262_p1;
wire   [31:0] j1_cast2_fu_284_p1;
wire   [31:0] op2_assign_1_fu_288_p2;
wire   [31:0] child2_V_1_fu_294_p3;
wire  signed [63:0] child2_V_1_cast_fu_301_p1;
wire   [0:0] tmp_1_fu_311_p0;
reg   [13:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'd2;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b0) begin
        ap_CS_fsm <= ap_ST_fsm_state2;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        j1_reg_210 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_state10) & (1'd0 == exitcond_fu_272_p2))) begin
        j1_reg_210 <= j_2_fu_278_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (exitcond1_fu_233_p2 == 1'd0))) begin
        j_reg_188 <= j_1_fu_239_p2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        j_reg_188 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        v_V_1_reg_199 <= val_V_3_reg_323;
    end else if (((1'b1 == ap_CS_fsm_state10) & (1'd0 == exitcond_fu_272_p2))) begin
        v_V_1_reg_199 <= child2_V_2_fu_305_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (exitcond1_fu_233_p2 == 1'd0))) begin
        v_V_reg_177 <= child1_V_2_fu_266_p2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        v_V_reg_177 <= val_V_4_reg_328;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_s_reg_333 <= tmp_s_fu_227_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        val_V_3_reg_323 <= generation_parent1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        val_V_4_reg_328 <= generation_parent2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        generatingDone = 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state2) & ~(1'd0 == grp_read_fu_130_p2))) begin
        generatingDone = 1'd0;
    end else begin
        generatingDone = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & ~(1'd0 == grp_read_fu_130_p2)) | (1'b1 == ap_CS_fsm_state13))) begin
        generatingDone_ap_vld = 1'b1;
    end else begin
        generatingDone_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        generation_child1_ap_vld = 1'b1;
    end else begin
        generation_child1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        generation_child2_ap_vld = 1'b1;
    end else begin
        generation_child2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & ~(1'd0 == grp_read_fu_130_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (exitcond1_fu_233_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (1'd0 == exitcond_fu_272_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & ~(1'd0 == tmp_1_fu_311_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign child1_V_2_fu_266_p2 = (child1_V_cast_fu_262_p1 ^ v_V_reg_177);

assign child1_V_cast_fu_262_p1 = $signed(child1_V_fu_255_p3);

assign child1_V_fu_255_p3 = ((tmp_s_reg_333[0:0] === 1'b1) ? op2_assign_fu_249_p2 : 32'd0);

assign child2_V_1_cast_fu_301_p1 = $signed(child2_V_1_fu_294_p3);

assign child2_V_1_fu_294_p3 = ((tmp_s_reg_333[0:0] === 1'b1) ? op2_assign_1_fu_288_p2 : 32'd0);

assign child2_V_2_fu_305_p2 = (child2_V_1_cast_fu_301_p1 ^ v_V_1_reg_199);

assign exitcond1_fu_233_p2 = ((j_reg_188 == 7'd64) ? 1'b1 : 1'b0);

assign exitcond_fu_272_p2 = ((j1_reg_210 == 7'd64) ? 1'b1 : 1'b0);

assign generation_child1 = v_V_reg_177;

assign generation_child2 = v_V_1_reg_199;

assign grp_read_fu_130_p2 = startGenerating;

assign j1_cast2_fu_284_p1 = j1_reg_210;

assign j_1_fu_239_p2 = (j_reg_188 + 7'd1);

assign j_2_fu_278_p2 = (j1_reg_210 + 7'd1);

assign j_cast3_fu_245_p1 = j_reg_188;

assign op2_assign_1_fu_288_p2 = 32'd1 << j1_cast2_fu_284_p1;

assign op2_assign_fu_249_p2 = 32'd1 << j_cast3_fu_245_p1;

assign tmp_1_fu_311_p0 = startGenerating;

assign tmp_1_fu_311_p2 = (tmp_1_fu_311_p0 ^ 1'd1);

assign tmp_s_fu_227_p2 = ((mutation_probability > 24'd1024) ? 1'b1 : 1'b0);

endmodule //GenerationGenerator_generateGeneration
