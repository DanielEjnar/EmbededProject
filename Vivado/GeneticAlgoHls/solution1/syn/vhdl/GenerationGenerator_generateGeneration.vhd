-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity GenerationGenerator_generateGeneration is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    startGenerating : IN STD_LOGIC;
    generatingDone : OUT STD_LOGIC;
    generatingDone_ap_vld : OUT STD_LOGIC;
    generation_parent1 : IN STD_LOGIC_VECTOR (63 downto 0);
    generation_parent2 : IN STD_LOGIC_VECTOR (63 downto 0);
    generation_child1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    generation_child1_ap_vld : OUT STD_LOGIC;
    generation_child2 : OUT STD_LOGIC_VECTOR (63 downto 0);
    generation_child2_ap_vld : OUT STD_LOGIC;
    mutation_probability : IN STD_LOGIC_VECTOR (23 downto 0);
    GenerationGenerator_trueRandomIndex_V_i : IN STD_LOGIC_VECTOR (23 downto 0);
    GenerationGenerator_trueRandomIndex_V_o : OUT STD_LOGIC_VECTOR (23 downto 0);
    GenerationGenerator_trueRandomIndex_V_o_ap_vld : OUT STD_LOGIC;
    GenerationGenerator_randomNumbers_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    GenerationGenerator_randomNumbers_V_ce0 : OUT STD_LOGIC;
    GenerationGenerator_randomNumbers_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0) );
end;


architecture behav of GenerationGenerator_generateGeneration is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv24_17 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000010111";
    constant ap_const_lv24_1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal val_V_3_reg_472 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal val_V_4_reg_477 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal p_tmp_s_fu_319_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_tmp_s_reg_482 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal val_V_reg_487 : STD_LOGIC_VECTOR (23 downto 0);
    signal j_1_fu_334_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_1_reg_495 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal exitcond1_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_tmp_1_fu_361_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal child1_V_2_fu_388_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_2_fu_400_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_2_reg_518 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal exitcond_fu_394_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_tmp_2_fu_423_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_tmp_2_reg_528 : STD_LOGIC_VECTOR (23 downto 0);
    signal child2_V_2_fu_454_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal GenerationGenerator_2_reg_210 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal v_V_reg_220 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_reg_231 : STD_LOGIC_VECTOR (6 downto 0);
    signal GenerationGenerator_5_reg_243 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal v_V_1_reg_253 : STD_LOGIC_VECTOR (63 downto 0);
    signal j1_reg_264 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_9_fu_340_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_406_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_read_fu_130_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp_11_fu_460_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_2_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_293_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal storemerge_i_fu_299_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_6_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_313_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_s_fu_349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_355_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal j_cast2_fu_345_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal op2_assign_fu_370_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal child1_V_1_fu_376_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal child1_V_1_cast_fu_384_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_fu_411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_417_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal j1_cast1_fu_432_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal op2_assign_1_fu_436_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal child2_V_1_fu_442_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal child2_V_1_cast_fu_450_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_fu_460_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '0') then
                ap_CS_fsm <= ap_ST_fsm_state2;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    GenerationGenerator_2_reg_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                GenerationGenerator_2_reg_210 <= p_tmp_1_fu_361_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                GenerationGenerator_2_reg_210 <= p_tmp_s_reg_482;
            end if; 
        end if;
    end process;

    GenerationGenerator_5_reg_243_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                GenerationGenerator_5_reg_243 <= GenerationGenerator_2_reg_210;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                GenerationGenerator_5_reg_243 <= p_tmp_2_reg_528;
            end if; 
        end if;
    end process;

    j1_reg_264_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                j1_reg_264 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                j1_reg_264 <= j_2_reg_518;
            end if; 
        end if;
    end process;

    j_reg_231_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                j_reg_231 <= j_1_reg_495;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                j_reg_231 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    v_V_1_reg_253_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                v_V_1_reg_253 <= val_V_3_reg_472;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                v_V_1_reg_253 <= child2_V_2_fu_454_p2;
            end if; 
        end if;
    end process;

    v_V_reg_220_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                v_V_reg_220 <= child1_V_2_fu_388_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                v_V_reg_220 <= val_V_4_reg_477;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                j_1_reg_495 <= j_1_fu_334_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                j_2_reg_518 <= j_2_fu_400_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_0 = exitcond_fu_394_p2))) then
                p_tmp_2_reg_528 <= p_tmp_2_fu_423_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                p_tmp_s_reg_482 <= p_tmp_s_fu_319_p3;
                val_V_reg_487 <= mutation_probability;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                val_V_3_reg_472 <= generation_parent1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                val_V_4_reg_477 <= generation_parent2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state7, exitcond1_fu_328_p2, ap_CS_fsm_state10, exitcond_fu_394_p2, grp_read_fu_130_p2, ap_CS_fsm_state2, ap_CS_fsm_state15, tmp_11_fu_460_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and not((ap_const_lv1_0 = grp_read_fu_130_p2)))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond1_fu_328_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_0 = exitcond_fu_394_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and not((ap_const_lv1_0 = tmp_11_fu_460_p2)))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;

    GenerationGenerator_randomNumbers_V_address0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state10, tmp_9_fu_340_p1, tmp_13_fu_406_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            GenerationGenerator_randomNumbers_V_address0 <= tmp_13_fu_406_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            GenerationGenerator_randomNumbers_V_address0 <= tmp_9_fu_340_p1(8 - 1 downto 0);
        else 
            GenerationGenerator_randomNumbers_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    GenerationGenerator_randomNumbers_V_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            GenerationGenerator_randomNumbers_V_ce0 <= ap_const_logic_1;
        else 
            GenerationGenerator_randomNumbers_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    GenerationGenerator_trueRandomIndex_V_o_assign_proc : process(p_tmp_s_fu_319_p3, ap_CS_fsm_state5, p_tmp_1_fu_361_p3, ap_CS_fsm_state8, ap_CS_fsm_state10, exitcond_fu_394_p2, p_tmp_2_fu_423_p3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_0 = exitcond_fu_394_p2))) then 
            GenerationGenerator_trueRandomIndex_V_o <= p_tmp_2_fu_423_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            GenerationGenerator_trueRandomIndex_V_o <= p_tmp_1_fu_361_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            GenerationGenerator_trueRandomIndex_V_o <= p_tmp_s_fu_319_p3;
        else 
            GenerationGenerator_trueRandomIndex_V_o <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    GenerationGenerator_trueRandomIndex_V_o_ap_vld_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state10, exitcond_fu_394_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_0 = exitcond_fu_394_p2)))) then 
            GenerationGenerator_trueRandomIndex_V_o_ap_vld <= ap_const_logic_1;
        else 
            GenerationGenerator_trueRandomIndex_V_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        child1_V_1_cast_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(child1_V_1_fu_376_p3),64));

    child1_V_1_fu_376_p3 <= 
        op2_assign_fu_370_p2 when (grp_fu_276_p2(0) = '1') else 
        ap_const_lv32_0;
    child1_V_2_fu_388_p2 <= (child1_V_1_cast_fu_384_p1 xor v_V_reg_220);
        child2_V_1_cast_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(child2_V_1_fu_442_p3),64));

    child2_V_1_fu_442_p3 <= 
        op2_assign_1_fu_436_p2 when (grp_fu_276_p2(0) = '1') else 
        ap_const_lv32_0;
    child2_V_2_fu_454_p2 <= (child2_V_1_cast_fu_450_p1 xor v_V_1_reg_253);
    exitcond1_fu_328_p2 <= "1" when (j_reg_231 = ap_const_lv7_40) else "0";
    exitcond_fu_394_p2 <= "1" when (j1_reg_264 = ap_const_lv7_40) else "0";

    generatingDone_assign_proc : process(grp_read_fu_130_p2, ap_CS_fsm_state2, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            generatingDone <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and not((ap_const_lv1_0 = grp_read_fu_130_p2)))) then 
            generatingDone <= ap_const_logic_0;
        else 
            generatingDone <= 'X';
        end if; 
    end process;


    generatingDone_ap_vld_assign_proc : process(grp_read_fu_130_p2, ap_CS_fsm_state2, ap_CS_fsm_state14)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and not((ap_const_lv1_0 = grp_read_fu_130_p2))) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            generatingDone_ap_vld <= ap_const_logic_1;
        else 
            generatingDone_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    generation_child1 <= v_V_reg_220;

    generation_child1_ap_vld_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            generation_child1_ap_vld <= ap_const_logic_1;
        else 
            generation_child1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    generation_child2 <= v_V_1_reg_253;

    generation_child2_ap_vld_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            generation_child2_ap_vld <= ap_const_logic_1;
        else 
            generation_child2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_276_p2 <= "1" when (unsigned(GenerationGenerator_randomNumbers_V_q0) < unsigned(val_V_reg_487)) else "0";
    grp_read_fu_130_p2 <= (0=>startGenerating, others=>'-');
    j1_cast1_fu_432_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j1_reg_264),32));
    j_1_fu_334_p2 <= std_logic_vector(unsigned(j_reg_231) + unsigned(ap_const_lv7_1));
    j_2_fu_400_p2 <= std_logic_vector(unsigned(j1_reg_264) + unsigned(ap_const_lv7_1));
    j_cast2_fu_345_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_231),32));
    op2_assign_1_fu_436_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv32_1),to_integer(unsigned('0' & j1_cast1_fu_432_p1(31-1 downto 0)))));
    op2_assign_fu_370_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv32_1),to_integer(unsigned('0' & j_cast2_fu_345_p1(31-1 downto 0)))));
    p_tmp_1_fu_361_p3 <= 
        ap_const_lv24_0 when (tmp_s_fu_349_p2(0) = '1') else 
        tmp_1_fu_355_p2;
    p_tmp_2_fu_423_p3 <= 
        ap_const_lv24_0 when (tmp_14_fu_411_p2(0) = '1') else 
        tmp_15_fu_417_p2;
    p_tmp_s_fu_319_p3 <= 
        ap_const_lv24_0 when (tmp_6_fu_307_p2(0) = '1') else 
        tmp_7_fu_313_p2;
    storemerge_i_fu_299_p3 <= 
        ap_const_lv24_0 when (tmp_2_fu_287_p2(0) = '1') else 
        tmp_3_fu_293_p2;
    tmp_11_fu_460_p0 <= (0=>startGenerating, others=>'-');
    tmp_11_fu_460_p2 <= (tmp_11_fu_460_p0 xor ap_const_lv1_1);
    tmp_13_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(GenerationGenerator_5_reg_243),32));
    tmp_14_fu_411_p2 <= "1" when (GenerationGenerator_5_reg_243 = ap_const_lv24_17) else "0";
    tmp_15_fu_417_p2 <= std_logic_vector(unsigned(GenerationGenerator_5_reg_243) + unsigned(ap_const_lv24_1));
    tmp_1_fu_355_p2 <= std_logic_vector(unsigned(GenerationGenerator_2_reg_210) + unsigned(ap_const_lv24_1));
    tmp_2_fu_287_p2 <= "1" when (GenerationGenerator_trueRandomIndex_V_i = ap_const_lv24_17) else "0";
    tmp_3_fu_293_p2 <= std_logic_vector(unsigned(GenerationGenerator_trueRandomIndex_V_i) + unsigned(ap_const_lv24_1));
    tmp_6_fu_307_p2 <= "1" when (storemerge_i_fu_299_p3 = ap_const_lv24_17) else "0";
    tmp_7_fu_313_p2 <= std_logic_vector(unsigned(storemerge_i_fu_299_p3) + unsigned(ap_const_lv24_1));
    tmp_9_fu_340_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(GenerationGenerator_2_reg_210),32));
    tmp_s_fu_349_p2 <= "1" when (GenerationGenerator_2_reg_210 = ap_const_lv24_17) else "0";
end behav;
