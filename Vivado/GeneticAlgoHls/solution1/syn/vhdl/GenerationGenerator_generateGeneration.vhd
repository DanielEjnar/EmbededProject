-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity GenerationGenerator_generateGeneration is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    startGenerating : IN STD_LOGIC;
    generatingDone : OUT STD_LOGIC;
    generatingDone_ap_vld : OUT STD_LOGIC;
    generation_parent1 : IN STD_LOGIC_VECTOR (63 downto 0);
    generation_parent2 : IN STD_LOGIC_VECTOR (63 downto 0);
    generation_child1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    generation_child1_ap_vld : OUT STD_LOGIC;
    generation_child2 : OUT STD_LOGIC_VECTOR (63 downto 0);
    generation_child2_ap_vld : OUT STD_LOGIC;
    mutation_probability : IN STD_LOGIC_VECTOR (23 downto 0) );
end;


architecture behav of GenerationGenerator_generateGeneration is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv24_400 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000010000000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal val_V_3_reg_323 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal val_V_4_reg_328 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_s_fu_227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_333 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal j_1_fu_239_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal child1_V_2_fu_266_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond1_fu_233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_2_fu_278_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal child2_V_2_fu_305_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal v_V_reg_177 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal j_reg_188 : STD_LOGIC_VECTOR (6 downto 0);
    signal v_V_1_reg_199 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal j1_reg_210 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_read_fu_130_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_1_fu_311_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal j_cast3_fu_245_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal op2_assign_fu_249_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal child1_V_fu_255_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal child1_V_cast_fu_262_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j1_cast2_fu_284_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal op2_assign_1_fu_288_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal child2_V_1_fu_294_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal child2_V_1_cast_fu_301_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_311_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '0') then
                ap_CS_fsm <= ap_ST_fsm_state2;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    j1_reg_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                j1_reg_210 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_0 = exitcond_fu_272_p2))) then 
                j1_reg_210 <= j_2_fu_278_p2;
            end if; 
        end if;
    end process;

    j_reg_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond1_fu_233_p2 = ap_const_lv1_0))) then 
                j_reg_188 <= j_1_fu_239_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                j_reg_188 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    v_V_1_reg_199_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                v_V_1_reg_199 <= val_V_3_reg_323;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_0 = exitcond_fu_272_p2))) then 
                v_V_1_reg_199 <= child2_V_2_fu_305_p2;
            end if; 
        end if;
    end process;

    v_V_reg_177_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond1_fu_233_p2 = ap_const_lv1_0))) then 
                v_V_reg_177 <= child1_V_2_fu_266_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                v_V_reg_177 <= val_V_4_reg_328;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_s_reg_333 <= tmp_s_fu_227_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                val_V_3_reg_323 <= generation_parent1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                val_V_4_reg_328 <= generation_parent2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state8, exitcond1_fu_233_p2, ap_CS_fsm_state10, exitcond_fu_272_p2, grp_read_fu_130_p2, ap_CS_fsm_state2, ap_CS_fsm_state14, tmp_1_fu_311_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and not((ap_const_lv1_0 = grp_read_fu_130_p2)))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond1_fu_233_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_0 = exitcond_fu_272_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and not((ap_const_lv1_0 = tmp_1_fu_311_p2)))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    child1_V_2_fu_266_p2 <= (child1_V_cast_fu_262_p1 xor v_V_reg_177);
        child1_V_cast_fu_262_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(child1_V_fu_255_p3),64));

    child1_V_fu_255_p3 <= 
        op2_assign_fu_249_p2 when (tmp_s_reg_333(0) = '1') else 
        ap_const_lv32_0;
        child2_V_1_cast_fu_301_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(child2_V_1_fu_294_p3),64));

    child2_V_1_fu_294_p3 <= 
        op2_assign_1_fu_288_p2 when (tmp_s_reg_333(0) = '1') else 
        ap_const_lv32_0;
    child2_V_2_fu_305_p2 <= (child2_V_1_cast_fu_301_p1 xor v_V_1_reg_199);
    exitcond1_fu_233_p2 <= "1" when (j_reg_188 = ap_const_lv7_40) else "0";
    exitcond_fu_272_p2 <= "1" when (j1_reg_210 = ap_const_lv7_40) else "0";

    generatingDone_assign_proc : process(grp_read_fu_130_p2, ap_CS_fsm_state2, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            generatingDone <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and not((ap_const_lv1_0 = grp_read_fu_130_p2)))) then 
            generatingDone <= ap_const_logic_0;
        else 
            generatingDone <= 'X';
        end if; 
    end process;


    generatingDone_ap_vld_assign_proc : process(grp_read_fu_130_p2, ap_CS_fsm_state2, ap_CS_fsm_state13)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and not((ap_const_lv1_0 = grp_read_fu_130_p2))) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            generatingDone_ap_vld <= ap_const_logic_1;
        else 
            generatingDone_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    generation_child1 <= v_V_reg_177;

    generation_child1_ap_vld_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            generation_child1_ap_vld <= ap_const_logic_1;
        else 
            generation_child1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    generation_child2 <= v_V_1_reg_199;

    generation_child2_ap_vld_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            generation_child2_ap_vld <= ap_const_logic_1;
        else 
            generation_child2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    grp_read_fu_130_p2 <= (0=>startGenerating, others=>'-');
    j1_cast2_fu_284_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j1_reg_210),32));
    j_1_fu_239_p2 <= std_logic_vector(unsigned(j_reg_188) + unsigned(ap_const_lv7_1));
    j_2_fu_278_p2 <= std_logic_vector(unsigned(j1_reg_210) + unsigned(ap_const_lv7_1));
    j_cast3_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_188),32));
    op2_assign_1_fu_288_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv32_1),to_integer(unsigned('0' & j1_cast2_fu_284_p1(31-1 downto 0)))));
    op2_assign_fu_249_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv32_1),to_integer(unsigned('0' & j_cast3_fu_245_p1(31-1 downto 0)))));
    tmp_1_fu_311_p0 <= (0=>startGenerating, others=>'-');
    tmp_1_fu_311_p2 <= (tmp_1_fu_311_p0 xor ap_const_lv1_1);
    tmp_s_fu_227_p2 <= "1" when (unsigned(mutation_probability) > unsigned(ap_const_lv24_400)) else "0";
end behav;
