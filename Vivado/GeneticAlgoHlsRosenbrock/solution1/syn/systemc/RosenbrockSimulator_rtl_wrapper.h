//RTL Wrapper auto-generated by Vivado HLS.
#include "RosenbrockSimulator.h"


SC_MODULE(RosenbrockSimulator_rtl_wrapper) {

    //ESL interface.

    sc_in<bool > clk;

    sc_in<bool > reset;

    sc_in<bool > startSimulation;

    sc_out<bool > simulationDone;

    sc_in<sc_uint<32> > a;

    sc_in<sc_uint<32> > b;

    sc_in<sc_uint<64> > chromosome_in;

    sc_out<sc_uint<32> > fitness;

    //RTL interface signals.


    sc_signal<sc_logic > rtl_reset;

    sc_signal<sc_logic > rtl_startSimulation;

    sc_signal<sc_logic > rtl_simulationDone;

    sc_signal<sc_lv<32> > rtl_a;

    sc_signal<sc_lv<32> > rtl_b;

    sc_signal<sc_lv<64> > rtl_chromosome_in;

    sc_signal<sc_lv<32> > rtl_fitness;


RosenbrockSimulator* RosenbrockSimulator_inst;

    SC_CTOR(RosenbrockSimulator_rtl_wrapper) { 

        RosenbrockSimulator_inst = new RosenbrockSimulator("RosenbrockSimulator_rtl_inst");


        initInstances(RosenbrockSimulator_inst);

        SC_METHOD(signal_connection);

        sensitive<<clk<<reset<<startSimulation<<rtl_simulationDone<<a<<b<<chromosome_in<<rtl_fitness;

    }

    ~RosenbrockSimulator_rtl_wrapper() {

    delete RosenbrockSimulator_inst;

    }

    void initInstances(RosenbrockSimulator * RosenbrockSimulator_inst) {

        //The RTL model.

        
        RosenbrockSimulator_inst->clk(clk);

        RosenbrockSimulator_inst->reset(rtl_reset);

        RosenbrockSimulator_inst->startSimulation(rtl_startSimulation);

        RosenbrockSimulator_inst->simulationDone(rtl_simulationDone);

        RosenbrockSimulator_inst->a(rtl_a);

        RosenbrockSimulator_inst->b(rtl_b);

        RosenbrockSimulator_inst->chromosome_in(rtl_chromosome_in);

        RosenbrockSimulator_inst->fitness(rtl_fitness);

    }


    void signal_connection() {


        rtl_reset.write((sc_logic)(reset.read()));

        rtl_startSimulation.write((sc_logic)(startSimulation.read()));

        

        bool aesl_tmp_0 = (rtl_simulationDone.read() == SC_LOGIC_1);

        simulationDone.write(aesl_tmp_0);


        rtl_a.write((sc_lv<32>)(a.read()));

        rtl_b.write((sc_lv<32>)(b.read()));

        rtl_chromosome_in.write((sc_lv<64>)(chromosome_in.read()));

        fitness.write((sc_lv<32>)(rtl_fitness.read()));


    }

};
