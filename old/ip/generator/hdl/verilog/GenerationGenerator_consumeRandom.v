// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module GenerationGenerator_consumeRandom (
        ap_clk,
        ap_rst,
        random,
        GenerationGenerator_randomNumberIndex_V_i,
        GenerationGenerator_randomNumberIndex_V_o,
        GenerationGenerator_randomNumberIndex_V_o_ap_vld,
        GenerationGenerator_randomNumbers_V_address0,
        GenerationGenerator_randomNumbers_V_ce0,
        GenerationGenerator_randomNumbers_V_we0,
        GenerationGenerator_randomNumbers_V_d0,
        GenerationGenerator_randomNumbers_V_q0
);

parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input  [23:0] random;
input  [23:0] GenerationGenerator_randomNumberIndex_V_i;
output  [23:0] GenerationGenerator_randomNumberIndex_V_o;
output   GenerationGenerator_randomNumberIndex_V_o_ap_vld;
output  [7:0] GenerationGenerator_randomNumbers_V_address0;
output   GenerationGenerator_randomNumbers_V_ce0;
output   GenerationGenerator_randomNumbers_V_we0;
output  [23:0] GenerationGenerator_randomNumbers_V_d0;
input  [23:0] GenerationGenerator_randomNumbers_V_q0;

reg GenerationGenerator_randomNumberIndex_V_o_ap_vld;
reg[7:0] GenerationGenerator_randomNumbers_V_address0;
reg GenerationGenerator_randomNumbers_V_ce0;
reg GenerationGenerator_randomNumbers_V_we0;

reg   [23:0] val_V_reg_223;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state2;
reg   [23:0] GenerationGenerator_s_reg_229;
wire   [8:0] tmp_s_fu_183_p2;
reg   [8:0] tmp_21_phi_fu_156_p4;
wire   [0:0] tmp_fu_173_p2;
wire  signed [31:0] tmp_29_cast_fu_190_p1;
wire   [31:0] tmp_23_fu_200_p1;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_22_fu_195_p2;
wire   [24:0] lhs_V_cast_fu_163_p1;
wire   [24:0] r_V_fu_167_p2;
wire   [8:0] tmp_13_fu_179_p1;
wire   [0:0] tmp_24_fu_204_p2;
wire   [23:0] tmp_25_fu_209_p2;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd2;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b0) begin
        ap_CS_fsm <= ap_ST_fsm_state2;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        GenerationGenerator_s_reg_229 <= GenerationGenerator_randomNumberIndex_V_i;
        val_V_reg_223 <= random;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == tmp_22_fu_195_p2))) begin
        GenerationGenerator_randomNumberIndex_V_o_ap_vld = 1'b1;
    end else begin
        GenerationGenerator_randomNumberIndex_V_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        GenerationGenerator_randomNumbers_V_address0 = tmp_23_fu_200_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        GenerationGenerator_randomNumbers_V_address0 = tmp_29_cast_fu_190_p1;
    end else begin
        GenerationGenerator_randomNumbers_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3))) begin
        GenerationGenerator_randomNumbers_V_ce0 = 1'b1;
    end else begin
        GenerationGenerator_randomNumbers_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == tmp_22_fu_195_p2))) begin
        GenerationGenerator_randomNumbers_V_we0 = 1'b1;
    end else begin
        GenerationGenerator_randomNumbers_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if ((tmp_fu_173_p2 == 1'd1)) begin
            tmp_21_phi_fu_156_p4 = 9'd23;
        end else if ((tmp_fu_173_p2 == 1'd0)) begin
            tmp_21_phi_fu_156_p4 = tmp_s_fu_183_p2;
        end else begin
            tmp_21_phi_fu_156_p4 = 'bx;
        end
    end else begin
        tmp_21_phi_fu_156_p4 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign GenerationGenerator_randomNumberIndex_V_o = ((tmp_24_fu_204_p2[0:0] === 1'b1) ? 24'd0 : tmp_25_fu_209_p2);

assign GenerationGenerator_randomNumbers_V_d0 = val_V_reg_223;

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign lhs_V_cast_fu_163_p1 = GenerationGenerator_randomNumberIndex_V_i;

assign r_V_fu_167_p2 = ($signed(lhs_V_cast_fu_163_p1) + $signed(25'd33554431));

assign tmp_13_fu_179_p1 = GenerationGenerator_randomNumberIndex_V_i[8:0];

assign tmp_22_fu_195_p2 = ((val_V_reg_223 == GenerationGenerator_randomNumbers_V_q0) ? 1'b1 : 1'b0);

assign tmp_23_fu_200_p1 = GenerationGenerator_s_reg_229;

assign tmp_24_fu_204_p2 = ((GenerationGenerator_s_reg_229 == 24'd23) ? 1'b1 : 1'b0);

assign tmp_25_fu_209_p2 = (GenerationGenerator_s_reg_229 + 24'd1);

assign tmp_29_cast_fu_190_p1 = $signed(tmp_21_phi_fu_156_p4);

assign tmp_fu_173_p2 = (($signed(r_V_fu_167_p2) > $signed(25'd24)) ? 1'b1 : 1'b0);

assign tmp_s_fu_183_p2 = ($signed(9'd511) + $signed(tmp_13_fu_179_p1));

endmodule //GenerationGenerator_consumeRandom
